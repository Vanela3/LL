#include <stdio.h>  // Include standard input-output library
#include <stdlib.h> // Include standard library for memory allocation

struct Node {  // Define the structure for a linked list node
    int data;  // Integer variable to store node data
    struct Node* next;  // Pointer to the next node
};

int main() {
    struct Node* head = NULL;  // Initialize head pointer to NULL
    struct Node* temp = NULL;  // Temporary pointer for traversal
    char choice;  // Variable to store user input (y/n)

    do {  // Start a loop to create nodes dynamically
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); // Allocate memory for a new node
        if (new_node == NULL) {  // Check if memory allocation failed
            printf("Memory allocation failed\n");  // Print error message
            return 1;  // Exit the program if memory allocation fails
        }

        printf("Enter data: ");  // Ask the user for data input
        scanf("%d", &new_node->data);  // Store the input data in the node
        new_node->next = NULL;  // Initialize the next pointer of the new node to NULL

        if (head == NULL) {  // If the list is empty, make this node the head
            head = new_node;
        } else {  // Otherwise, link the previous node to the new node
            temp->next = new_node;
        }
        temp = new_node;  // Move temp to the newly created node

        printf("Do you want to add another node? (y/n): ");  // Ask if user wants to continue
        scanf(" %c", &choice);  // Store the userâ€™s choice

    } while (choice == 'y' || choice == 'Y');  // Continue if user enters 'y' or 'Y'

    temp = head;  // Start counting from the head node
    int count = 0;  // Initialize count variable

    while (temp != NULL) {  // Traverse through the linked list
        count = count + 1;  // Increment count for each node
        temp = temp->next;  // Move to the next node
    }

    printf("Number of nodes is %d\n", count);  // Print the total number of nodes

    temp = head;  // Start memory cleanup from the head node
    while (temp != NULL) {  // Traverse through the linked list
        struct Node* next_node = temp->next;  // Store the next node's address
        free(temp);  // Free memory for the current node
        temp = next_node;  // Move to the next node
    }

    return 0;  // End the program successfully
}
